#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VNTSellGold.App_Code
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="VNTSellGold")]
	public partial class LinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTbl1(Tbl1 instance);
    partial void UpdateTbl1(Tbl1 instance);
    partial void DeleteTbl1(Tbl1 instance);
    partial void InsertTbl7(Tbl7 instance);
    partial void UpdateTbl7(Tbl7 instance);
    partial void DeleteTbl7(Tbl7 instance);
    partial void InsertTbl2(Tbl2 instance);
    partial void UpdateTbl2(Tbl2 instance);
    partial void DeleteTbl2(Tbl2 instance);
    partial void InsertTbl3(Tbl3 instance);
    partial void UpdateTbl3(Tbl3 instance);
    partial void DeleteTbl3(Tbl3 instance);
    partial void InsertTbl4(Tbl4 instance);
    partial void UpdateTbl4(Tbl4 instance);
    partial void DeleteTbl4(Tbl4 instance);
    partial void InsertTbl6(Tbl6 instance);
    partial void UpdateTbl6(Tbl6 instance);
    partial void DeleteTbl6(Tbl6 instance);
    partial void InsertTbl5(Tbl5 instance);
    partial void UpdateTbl5(Tbl5 instance);
    partial void DeleteTbl5(Tbl5 instance);
    #endregion
		
		public LinqDataContext() :
        base(global::VNTSellGold.Properties.Settings.Default.VNTSellGoldConnectionString + ";Password=sellgold", mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Tbl1> Tbl1s
		{
			get
			{
				return this.GetTable<Tbl1>();
			}
		}
		
		public System.Data.Linq.Table<Tbl7> Tbl7s
		{
			get
			{
				return this.GetTable<Tbl7>();
			}
		}
		
		public System.Data.Linq.Table<Tbl2> Tbl2s
		{
			get
			{
				return this.GetTable<Tbl2>();
			}
		}
		
		public System.Data.Linq.Table<Tbl3> Tbl3s
		{
			get
			{
				return this.GetTable<Tbl3>();
			}
		}
		
		public System.Data.Linq.Table<Tbl4> Tbl4s
		{
			get
			{
				return this.GetTable<Tbl4>();
			}
		}
		
		public System.Data.Linq.Table<Tbl6> Tbl6s
		{
			get
			{
				return this.GetTable<Tbl6>();
			}
		}
		
		public System.Data.Linq.Table<Tbl5> Tbl5s
		{
			get
			{
				return this.GetTable<Tbl5>();
			}
		}
	}
	
	[Table(Name="dbo.Tbl1")]
	public partial class Tbl1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _SCol1;
		
		private EntitySet<Tbl5> _Tbl5s;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSCol1Changing(string value);
    partial void OnSCol1Changed();
    #endregion
		
		public Tbl1()
		{
			this._Tbl5s = new EntitySet<Tbl5>(new Action<Tbl5>(this.attach_Tbl5s), new Action<Tbl5>(this.detach_Tbl5s));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SCol1", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string SCol1
		{
			get
			{
				return this._SCol1;
			}
			set
			{
				if ((this._SCol1 != value))
				{
					this.OnSCol1Changing(value);
					this.SendPropertyChanging();
					this._SCol1 = value;
					this.SendPropertyChanged("SCol1");
					this.OnSCol1Changed();
				}
			}
		}
		
		[Association(Name="Tbl1_Tbl5", Storage="_Tbl5s", OtherKey="IdTbl1")]
		public EntitySet<Tbl5> Tbl5s
		{
			get
			{
				return this._Tbl5s;
			}
			set
			{
				this._Tbl5s.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tbl5s(Tbl5 entity)
		{
			this.SendPropertyChanging();
			entity.Tbl1 = this;
		}
		
		private void detach_Tbl5s(Tbl5 entity)
		{
			this.SendPropertyChanging();
			entity.Tbl1 = null;
		}
	}
	
	[Table(Name="dbo.Tbl7")]
	public partial class Tbl7 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _IdTbl4;
		
		private System.Nullable<int> _IdTbl5;
		
		private System.Nullable<System.DateTime> _DTCol1;
		
		private System.Nullable<decimal> _MCol1;
		
		private string _SCol1;
		
		private EntityRef<Tbl4> _Tbl4;
		
		private EntityRef<Tbl5> _Tbl5;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTbl4Changing(System.Nullable<int> value);
    partial void OnIdTbl4Changed();
    partial void OnIdTbl5Changing(System.Nullable<int> value);
    partial void OnIdTbl5Changed();
    partial void OnDTCol1Changing(System.Nullable<System.DateTime> value);
    partial void OnDTCol1Changed();
    partial void OnMCol1Changing(System.Nullable<decimal> value);
    partial void OnMCol1Changed();
    partial void OnSCol1Changing(string value);
    partial void OnSCol1Changed();
    #endregion
		
		public Tbl7()
		{
			this._Tbl4 = default(EntityRef<Tbl4>);
			this._Tbl5 = default(EntityRef<Tbl5>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTbl4", DbType="Int")]
		public System.Nullable<int> IdTbl4
		{
			get
			{
				return this._IdTbl4;
			}
			set
			{
				if ((this._IdTbl4 != value))
				{
					if (this._Tbl4.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTbl4Changing(value);
					this.SendPropertyChanging();
					this._IdTbl4 = value;
					this.SendPropertyChanged("IdTbl4");
					this.OnIdTbl4Changed();
				}
			}
		}
		
		[Column(Storage="_IdTbl5", DbType="Int")]
		public System.Nullable<int> IdTbl5
		{
			get
			{
				return this._IdTbl5;
			}
			set
			{
				if ((this._IdTbl5 != value))
				{
					if (this._Tbl5.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTbl5Changing(value);
					this.SendPropertyChanging();
					this._IdTbl5 = value;
					this.SendPropertyChanged("IdTbl5");
					this.OnIdTbl5Changed();
				}
			}
		}
		
		[Column(Storage="_DTCol1", DbType="DateTime")]
		public System.Nullable<System.DateTime> DTCol1
		{
			get
			{
				return this._DTCol1;
			}
			set
			{
				if ((this._DTCol1 != value))
				{
					this.OnDTCol1Changing(value);
					this.SendPropertyChanging();
					this._DTCol1 = value;
					this.SendPropertyChanged("DTCol1");
					this.OnDTCol1Changed();
				}
			}
		}
		
		[Column(Storage="_MCol1", DbType="Money")]
		public System.Nullable<decimal> MCol1
		{
			get
			{
				return this._MCol1;
			}
			set
			{
				if ((this._MCol1 != value))
				{
					this.OnMCol1Changing(value);
					this.SendPropertyChanging();
					this._MCol1 = value;
					this.SendPropertyChanged("MCol1");
					this.OnMCol1Changed();
				}
			}
		}
		
		[Column(Storage="_SCol1", DbType="NVarChar(500)")]
		public string SCol1
		{
			get
			{
				return this._SCol1;
			}
			set
			{
				if ((this._SCol1 != value))
				{
					this.OnSCol1Changing(value);
					this.SendPropertyChanging();
					this._SCol1 = value;
					this.SendPropertyChanged("SCol1");
					this.OnSCol1Changed();
				}
			}
		}
		
		[Association(Name="Tbl4_Tbl7", Storage="_Tbl4", ThisKey="IdTbl4", IsForeignKey=true)]
		public Tbl4 Tbl4
		{
			get
			{
				return this._Tbl4.Entity;
			}
			set
			{
				Tbl4 previousValue = this._Tbl4.Entity;
				if (((previousValue != value) 
							|| (this._Tbl4.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl4.Entity = null;
						previousValue.Tbl7s.Remove(this);
					}
					this._Tbl4.Entity = value;
					if ((value != null))
					{
						value.Tbl7s.Add(this);
						this._IdTbl4 = value.Id;
					}
					else
					{
						this._IdTbl4 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tbl4");
				}
			}
		}
		
		[Association(Name="Tbl5_Tbl7", Storage="_Tbl5", ThisKey="IdTbl5", IsForeignKey=true)]
		public Tbl5 Tbl5
		{
			get
			{
				return this._Tbl5.Entity;
			}
			set
			{
				Tbl5 previousValue = this._Tbl5.Entity;
				if (((previousValue != value) 
							|| (this._Tbl5.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl5.Entity = null;
						previousValue.Tbl7s.Remove(this);
					}
					this._Tbl5.Entity = value;
					if ((value != null))
					{
						value.Tbl7s.Add(this);
						this._IdTbl5 = value.Id;
					}
					else
					{
						this._IdTbl5 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tbl5");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Tbl2")]
	public partial class Tbl2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _SCol1;
		
		private EntitySet<Tbl5> _Tbl5s;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSCol1Changing(string value);
    partial void OnSCol1Changed();
    #endregion
		
		public Tbl2()
		{
			this._Tbl5s = new EntitySet<Tbl5>(new Action<Tbl5>(this.attach_Tbl5s), new Action<Tbl5>(this.detach_Tbl5s));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SCol1", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string SCol1
		{
			get
			{
				return this._SCol1;
			}
			set
			{
				if ((this._SCol1 != value))
				{
					this.OnSCol1Changing(value);
					this.SendPropertyChanging();
					this._SCol1 = value;
					this.SendPropertyChanged("SCol1");
					this.OnSCol1Changed();
				}
			}
		}
		
		[Association(Name="Tbl2_Tbl5", Storage="_Tbl5s", OtherKey="IdTbl2")]
		public EntitySet<Tbl5> Tbl5s
		{
			get
			{
				return this._Tbl5s;
			}
			set
			{
				this._Tbl5s.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tbl5s(Tbl5 entity)
		{
			this.SendPropertyChanging();
			entity.Tbl2 = this;
		}
		
		private void detach_Tbl5s(Tbl5 entity)
		{
			this.SendPropertyChanging();
			entity.Tbl2 = null;
		}
	}
	
	[Table(Name="dbo.Tbl3")]
	public partial class Tbl3 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ICol1;
		
		private string _SCol1;
		
		private string _SCol2;
		
		private string _SCol3;
		
		private string _SCol4;
		
		private string _SCol5;
		
		private string _SCol6;
		
		private System.Nullable<System.DateTime> _DTCol1;
		
		private EntitySet<Tbl6> _Tbl6s;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnICol1Changing(int value);
    partial void OnICol1Changed();
    partial void OnSCol1Changing(string value);
    partial void OnSCol1Changed();
    partial void OnSCol2Changing(string value);
    partial void OnSCol2Changed();
    partial void OnSCol3Changing(string value);
    partial void OnSCol3Changed();
    partial void OnSCol4Changing(string value);
    partial void OnSCol4Changed();
    partial void OnSCol5Changing(string value);
    partial void OnSCol5Changed();
    partial void OnSCol6Changing(string value);
    partial void OnSCol6Changed();
    partial void OnDTCol1Changing(System.Nullable<System.DateTime> value);
    partial void OnDTCol1Changed();
    #endregion
		
		public Tbl3()
		{
			this._Tbl6s = new EntitySet<Tbl6>(new Action<Tbl6>(this.attach_Tbl6s), new Action<Tbl6>(this.detach_Tbl6s));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ICol1", DbType="Int NOT NULL")]
		public int ICol1
		{
			get
			{
				return this._ICol1;
			}
			set
			{
				if ((this._ICol1 != value))
				{
					this.OnICol1Changing(value);
					this.SendPropertyChanging();
					this._ICol1 = value;
					this.SendPropertyChanged("ICol1");
					this.OnICol1Changed();
				}
			}
		}
		
		[Column(Storage="_SCol1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SCol1
		{
			get
			{
				return this._SCol1;
			}
			set
			{
				if ((this._SCol1 != value))
				{
					this.OnSCol1Changing(value);
					this.SendPropertyChanging();
					this._SCol1 = value;
					this.SendPropertyChanged("SCol1");
					this.OnSCol1Changed();
				}
			}
		}
		
		[Column(Storage="_SCol2", DbType="NVarChar(50)")]
		public string SCol2
		{
			get
			{
				return this._SCol2;
			}
			set
			{
				if ((this._SCol2 != value))
				{
					this.OnSCol2Changing(value);
					this.SendPropertyChanging();
					this._SCol2 = value;
					this.SendPropertyChanged("SCol2");
					this.OnSCol2Changed();
				}
			}
		}
		
		[Column(Storage="_SCol3", DbType="NVarChar(50)")]
		public string SCol3
		{
			get
			{
				return this._SCol3;
			}
			set
			{
				if ((this._SCol3 != value))
				{
					this.OnSCol3Changing(value);
					this.SendPropertyChanging();
					this._SCol3 = value;
					this.SendPropertyChanged("SCol3");
					this.OnSCol3Changed();
				}
			}
		}
		
		[Column(Storage="_SCol4", DbType="NVarChar(50)")]
		public string SCol4
		{
			get
			{
				return this._SCol4;
			}
			set
			{
				if ((this._SCol4 != value))
				{
					this.OnSCol4Changing(value);
					this.SendPropertyChanging();
					this._SCol4 = value;
					this.SendPropertyChanged("SCol4");
					this.OnSCol4Changed();
				}
			}
		}
		
		[Column(Storage="_SCol5", DbType="NVarChar(50)")]
		public string SCol5
		{
			get
			{
				return this._SCol5;
			}
			set
			{
				if ((this._SCol5 != value))
				{
					this.OnSCol5Changing(value);
					this.SendPropertyChanging();
					this._SCol5 = value;
					this.SendPropertyChanged("SCol5");
					this.OnSCol5Changed();
				}
			}
		}
		
		[Column(Storage="_SCol6", DbType="NVarChar(50)")]
		public string SCol6
		{
			get
			{
				return this._SCol6;
			}
			set
			{
				if ((this._SCol6 != value))
				{
					this.OnSCol6Changing(value);
					this.SendPropertyChanging();
					this._SCol6 = value;
					this.SendPropertyChanged("SCol6");
					this.OnSCol6Changed();
				}
			}
		}
		
		[Column(Storage="_DTCol1", DbType="DateTime")]
		public System.Nullable<System.DateTime> DTCol1
		{
			get
			{
				return this._DTCol1;
			}
			set
			{
				if ((this._DTCol1 != value))
				{
					this.OnDTCol1Changing(value);
					this.SendPropertyChanging();
					this._DTCol1 = value;
					this.SendPropertyChanged("DTCol1");
					this.OnDTCol1Changed();
				}
			}
		}
		
		[Association(Name="Tbl3_Tbl6", Storage="_Tbl6s", OtherKey="IdTbl3")]
		public EntitySet<Tbl6> Tbl6s
		{
			get
			{
				return this._Tbl6s;
			}
			set
			{
				this._Tbl6s.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tbl6s(Tbl6 entity)
		{
			this.SendPropertyChanging();
			entity.Tbl3 = this;
		}
		
		private void detach_Tbl6s(Tbl6 entity)
		{
			this.SendPropertyChanging();
			entity.Tbl3 = null;
		}
	}
	
	[Table(Name="dbo.Tbl4")]
	public partial class Tbl4 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ICol1;
		
		private string _SCol1;
		
		private string _SCol2;
		
		private string _SCol3;
		
		private string _SCol4;
		
		private string _SCol5;
		
		private System.Nullable<System.DateTime> _DTCol1;
		
		private EntitySet<Tbl7> _Tbl7s;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnICol1Changing(int value);
    partial void OnICol1Changed();
    partial void OnSCol1Changing(string value);
    partial void OnSCol1Changed();
    partial void OnSCol2Changing(string value);
    partial void OnSCol2Changed();
    partial void OnSCol3Changing(string value);
    partial void OnSCol3Changed();
    partial void OnSCol4Changing(string value);
    partial void OnSCol4Changed();
    partial void OnSCol5Changing(string value);
    partial void OnSCol5Changed();
    partial void OnDTCol1Changing(System.Nullable<System.DateTime> value);
    partial void OnDTCol1Changed();
    #endregion
		
		public Tbl4()
		{
			this._Tbl7s = new EntitySet<Tbl7>(new Action<Tbl7>(this.attach_Tbl7s), new Action<Tbl7>(this.detach_Tbl7s));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ICol1", DbType="Int NOT NULL")]
		public int ICol1
		{
			get
			{
				return this._ICol1;
			}
			set
			{
				if ((this._ICol1 != value))
				{
					this.OnICol1Changing(value);
					this.SendPropertyChanging();
					this._ICol1 = value;
					this.SendPropertyChanged("ICol1");
					this.OnICol1Changed();
				}
			}
		}
		
		[Column(Storage="_SCol1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SCol1
		{
			get
			{
				return this._SCol1;
			}
			set
			{
				if ((this._SCol1 != value))
				{
					this.OnSCol1Changing(value);
					this.SendPropertyChanging();
					this._SCol1 = value;
					this.SendPropertyChanged("SCol1");
					this.OnSCol1Changed();
				}
			}
		}
		
		[Column(Storage="_SCol2", DbType="NVarChar(50)")]
		public string SCol2
		{
			get
			{
				return this._SCol2;
			}
			set
			{
				if ((this._SCol2 != value))
				{
					this.OnSCol2Changing(value);
					this.SendPropertyChanging();
					this._SCol2 = value;
					this.SendPropertyChanged("SCol2");
					this.OnSCol2Changed();
				}
			}
		}
		
		[Column(Storage="_SCol3", DbType="NVarChar(50)")]
		public string SCol3
		{
			get
			{
				return this._SCol3;
			}
			set
			{
				if ((this._SCol3 != value))
				{
					this.OnSCol3Changing(value);
					this.SendPropertyChanging();
					this._SCol3 = value;
					this.SendPropertyChanged("SCol3");
					this.OnSCol3Changed();
				}
			}
		}
		
		[Column(Storage="_SCol4", DbType="NVarChar(50)")]
		public string SCol4
		{
			get
			{
				return this._SCol4;
			}
			set
			{
				if ((this._SCol4 != value))
				{
					this.OnSCol4Changing(value);
					this.SendPropertyChanging();
					this._SCol4 = value;
					this.SendPropertyChanged("SCol4");
					this.OnSCol4Changed();
				}
			}
		}
		
		[Column(Storage="_SCol5", DbType="NVarChar(50)")]
		public string SCol5
		{
			get
			{
				return this._SCol5;
			}
			set
			{
				if ((this._SCol5 != value))
				{
					this.OnSCol5Changing(value);
					this.SendPropertyChanging();
					this._SCol5 = value;
					this.SendPropertyChanged("SCol5");
					this.OnSCol5Changed();
				}
			}
		}
		
		[Column(Storage="_DTCol1", DbType="DateTime")]
		public System.Nullable<System.DateTime> DTCol1
		{
			get
			{
				return this._DTCol1;
			}
			set
			{
				if ((this._DTCol1 != value))
				{
					this.OnDTCol1Changing(value);
					this.SendPropertyChanging();
					this._DTCol1 = value;
					this.SendPropertyChanged("DTCol1");
					this.OnDTCol1Changed();
				}
			}
		}
		
		[Association(Name="Tbl4_Tbl7", Storage="_Tbl7s", OtherKey="IdTbl4")]
		public EntitySet<Tbl7> Tbl7s
		{
			get
			{
				return this._Tbl7s;
			}
			set
			{
				this._Tbl7s.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tbl7s(Tbl7 entity)
		{
			this.SendPropertyChanging();
			entity.Tbl4 = this;
		}
		
		private void detach_Tbl7s(Tbl7 entity)
		{
			this.SendPropertyChanging();
			entity.Tbl4 = null;
		}
	}
	
	[Table(Name="dbo.Tbl6")]
	public partial class Tbl6 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _IdTbl3;
		
		private System.Nullable<int> _IdTbl5;
		
		private System.Nullable<System.DateTime> _DTCol1;
		
		private System.Nullable<System.DateTime> _DTCol2;
		
		private EntityRef<Tbl3> _Tbl3;
		
		private EntityRef<Tbl5> _Tbl5;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTbl3Changing(System.Nullable<int> value);
    partial void OnIdTbl3Changed();
    partial void OnIdTbl5Changing(System.Nullable<int> value);
    partial void OnIdTbl5Changed();
    partial void OnDTCol1Changing(System.Nullable<System.DateTime> value);
    partial void OnDTCol1Changed();
    partial void OnDTCol2Changing(System.Nullable<System.DateTime> value);
    partial void OnDTCol2Changed();
    #endregion
		
		public Tbl6()
		{
			this._Tbl3 = default(EntityRef<Tbl3>);
			this._Tbl5 = default(EntityRef<Tbl5>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTbl3", DbType="Int")]
		public System.Nullable<int> IdTbl3
		{
			get
			{
				return this._IdTbl3;
			}
			set
			{
				if ((this._IdTbl3 != value))
				{
					if (this._Tbl3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTbl3Changing(value);
					this.SendPropertyChanging();
					this._IdTbl3 = value;
					this.SendPropertyChanged("IdTbl3");
					this.OnIdTbl3Changed();
				}
			}
		}
		
		[Column(Storage="_IdTbl5", DbType="Int")]
		public System.Nullable<int> IdTbl5
		{
			get
			{
				return this._IdTbl5;
			}
			set
			{
				if ((this._IdTbl5 != value))
				{
					if (this._Tbl5.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTbl5Changing(value);
					this.SendPropertyChanging();
					this._IdTbl5 = value;
					this.SendPropertyChanged("IdTbl5");
					this.OnIdTbl5Changed();
				}
			}
		}
		
		[Column(Storage="_DTCol1", DbType="DateTime")]
		public System.Nullable<System.DateTime> DTCol1
		{
			get
			{
				return this._DTCol1;
			}
			set
			{
				if ((this._DTCol1 != value))
				{
					this.OnDTCol1Changing(value);
					this.SendPropertyChanging();
					this._DTCol1 = value;
					this.SendPropertyChanged("DTCol1");
					this.OnDTCol1Changed();
				}
			}
		}
		
		[Column(Storage="_DTCol2", DbType="DateTime")]
		public System.Nullable<System.DateTime> DTCol2
		{
			get
			{
				return this._DTCol2;
			}
			set
			{
				if ((this._DTCol2 != value))
				{
					this.OnDTCol2Changing(value);
					this.SendPropertyChanging();
					this._DTCol2 = value;
					this.SendPropertyChanged("DTCol2");
					this.OnDTCol2Changed();
				}
			}
		}
		
		[Association(Name="Tbl3_Tbl6", Storage="_Tbl3", ThisKey="IdTbl3", IsForeignKey=true)]
		public Tbl3 Tbl3
		{
			get
			{
				return this._Tbl3.Entity;
			}
			set
			{
				Tbl3 previousValue = this._Tbl3.Entity;
				if (((previousValue != value) 
							|| (this._Tbl3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl3.Entity = null;
						previousValue.Tbl6s.Remove(this);
					}
					this._Tbl3.Entity = value;
					if ((value != null))
					{
						value.Tbl6s.Add(this);
						this._IdTbl3 = value.Id;
					}
					else
					{
						this._IdTbl3 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tbl3");
				}
			}
		}
		
		[Association(Name="Tbl5_Tbl6", Storage="_Tbl5", ThisKey="IdTbl5", IsForeignKey=true)]
		public Tbl5 Tbl5
		{
			get
			{
				return this._Tbl5.Entity;
			}
			set
			{
				Tbl5 previousValue = this._Tbl5.Entity;
				if (((previousValue != value) 
							|| (this._Tbl5.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl5.Entity = null;
						previousValue.Tbl6s.Remove(this);
					}
					this._Tbl5.Entity = value;
					if ((value != null))
					{
						value.Tbl6s.Add(this);
						this._IdTbl5 = value.Id;
					}
					else
					{
						this._IdTbl5 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tbl5");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Tbl5")]
	public partial class Tbl5 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _IdTbl1;
		
		private System.Nullable<int> _IdTbl2;
		
		private System.Nullable<int> _ICol1;
		
		private System.Nullable<int> _ICol2;
		
		private System.Nullable<int> _ICol3;
		
		private System.Nullable<decimal> _MCol1;
		
		private System.Nullable<decimal> _MCol2;
		
		private string _SCol1;
		
		private string _SCol2;
		
		private string _CreateBy;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private string _ModifyBy;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntitySet<Tbl7> _Tbl7s;
		
		private EntitySet<Tbl6> _Tbl6s;
		
		private EntityRef<Tbl1> _Tbl1;
		
		private EntityRef<Tbl2> _Tbl2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTbl1Changing(System.Nullable<int> value);
    partial void OnIdTbl1Changed();
    partial void OnIdTbl2Changing(System.Nullable<int> value);
    partial void OnIdTbl2Changed();
    partial void OnICol1Changing(System.Nullable<int> value);
    partial void OnICol1Changed();
    partial void OnICol2Changing(System.Nullable<int> value);
    partial void OnICol2Changed();
    partial void OnICol3Changing(System.Nullable<int> value);
    partial void OnICol3Changed();
    partial void OnMCol1Changing(System.Nullable<decimal> value);
    partial void OnMCol1Changed();
    partial void OnMCol2Changing(System.Nullable<decimal> value);
    partial void OnMCol2Changed();
    partial void OnSCol1Changing(string value);
    partial void OnSCol1Changed();
    partial void OnSCol2Changing(string value);
    partial void OnSCol2Changed();
    partial void OnCreateByChanging(string value);
    partial void OnCreateByChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyByChanging(string value);
    partial void OnModifyByChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public Tbl5()
		{
			this._Tbl7s = new EntitySet<Tbl7>(new Action<Tbl7>(this.attach_Tbl7s), new Action<Tbl7>(this.detach_Tbl7s));
			this._Tbl6s = new EntitySet<Tbl6>(new Action<Tbl6>(this.attach_Tbl6s), new Action<Tbl6>(this.detach_Tbl6s));
			this._Tbl1 = default(EntityRef<Tbl1>);
			this._Tbl2 = default(EntityRef<Tbl2>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTbl1", DbType="Int")]
		public System.Nullable<int> IdTbl1
		{
			get
			{
				return this._IdTbl1;
			}
			set
			{
				if ((this._IdTbl1 != value))
				{
					if (this._Tbl1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTbl1Changing(value);
					this.SendPropertyChanging();
					this._IdTbl1 = value;
					this.SendPropertyChanged("IdTbl1");
					this.OnIdTbl1Changed();
				}
			}
		}
		
		[Column(Storage="_IdTbl2", DbType="Int")]
		public System.Nullable<int> IdTbl2
		{
			get
			{
				return this._IdTbl2;
			}
			set
			{
				if ((this._IdTbl2 != value))
				{
					if (this._Tbl2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTbl2Changing(value);
					this.SendPropertyChanging();
					this._IdTbl2 = value;
					this.SendPropertyChanged("IdTbl2");
					this.OnIdTbl2Changed();
				}
			}
		}
		
		[Column(Storage="_ICol1", DbType="Int")]
		public System.Nullable<int> ICol1
		{
			get
			{
				return this._ICol1;
			}
			set
			{
				if ((this._ICol1 != value))
				{
					this.OnICol1Changing(value);
					this.SendPropertyChanging();
					this._ICol1 = value;
					this.SendPropertyChanged("ICol1");
					this.OnICol1Changed();
				}
			}
		}
		
		[Column(Storage="_ICol2", DbType="Int")]
		public System.Nullable<int> ICol2
		{
			get
			{
				return this._ICol2;
			}
			set
			{
				if ((this._ICol2 != value))
				{
					this.OnICol2Changing(value);
					this.SendPropertyChanging();
					this._ICol2 = value;
					this.SendPropertyChanged("ICol2");
					this.OnICol2Changed();
				}
			}
		}
		
		[Column(Storage="_ICol3", DbType="Int")]
		public System.Nullable<int> ICol3
		{
			get
			{
				return this._ICol3;
			}
			set
			{
				if ((this._ICol3 != value))
				{
					this.OnICol3Changing(value);
					this.SendPropertyChanging();
					this._ICol3 = value;
					this.SendPropertyChanged("ICol3");
					this.OnICol3Changed();
				}
			}
		}
		
		[Column(Storage="_MCol1", DbType="Money")]
		public System.Nullable<decimal> MCol1
		{
			get
			{
				return this._MCol1;
			}
			set
			{
				if ((this._MCol1 != value))
				{
					this.OnMCol1Changing(value);
					this.SendPropertyChanging();
					this._MCol1 = value;
					this.SendPropertyChanged("MCol1");
					this.OnMCol1Changed();
				}
			}
		}
		
		[Column(Storage="_MCol2", DbType="Money")]
		public System.Nullable<decimal> MCol2
		{
			get
			{
				return this._MCol2;
			}
			set
			{
				if ((this._MCol2 != value))
				{
					this.OnMCol2Changing(value);
					this.SendPropertyChanging();
					this._MCol2 = value;
					this.SendPropertyChanged("MCol2");
					this.OnMCol2Changed();
				}
			}
		}
		
		[Column(Storage="_SCol1", DbType="NVarChar(500)")]
		public string SCol1
		{
			get
			{
				return this._SCol1;
			}
			set
			{
				if ((this._SCol1 != value))
				{
					this.OnSCol1Changing(value);
					this.SendPropertyChanging();
					this._SCol1 = value;
					this.SendPropertyChanged("SCol1");
					this.OnSCol1Changed();
				}
			}
		}
		
		[Column(Storage="_SCol2", DbType="NVarChar(1000)")]
		public string SCol2
		{
			get
			{
				return this._SCol2;
			}
			set
			{
				if ((this._SCol2 != value))
				{
					this.OnSCol2Changing(value);
					this.SendPropertyChanging();
					this._SCol2 = value;
					this.SendPropertyChanged("SCol2");
					this.OnSCol2Changed();
				}
			}
		}
		
		[Column(Storage="_CreateBy", DbType="NVarChar(50)")]
		public string CreateBy
		{
			get
			{
				return this._CreateBy;
			}
			set
			{
				if ((this._CreateBy != value))
				{
					this.OnCreateByChanging(value);
					this.SendPropertyChanging();
					this._CreateBy = value;
					this.SendPropertyChanged("CreateBy");
					this.OnCreateByChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyBy", DbType="NVarChar(50)")]
		public string ModifyBy
		{
			get
			{
				return this._ModifyBy;
			}
			set
			{
				if ((this._ModifyBy != value))
				{
					this.OnModifyByChanging(value);
					this.SendPropertyChanging();
					this._ModifyBy = value;
					this.SendPropertyChanged("ModifyBy");
					this.OnModifyByChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="Tbl5_Tbl7", Storage="_Tbl7s", OtherKey="IdTbl5")]
		public EntitySet<Tbl7> Tbl7s
		{
			get
			{
				return this._Tbl7s;
			}
			set
			{
				this._Tbl7s.Assign(value);
			}
		}
		
		[Association(Name="Tbl5_Tbl6", Storage="_Tbl6s", OtherKey="IdTbl5")]
		public EntitySet<Tbl6> Tbl6s
		{
			get
			{
				return this._Tbl6s;
			}
			set
			{
				this._Tbl6s.Assign(value);
			}
		}
		
		[Association(Name="Tbl1_Tbl5", Storage="_Tbl1", ThisKey="IdTbl1", IsForeignKey=true)]
		public Tbl1 Tbl1
		{
			get
			{
				return this._Tbl1.Entity;
			}
			set
			{
				Tbl1 previousValue = this._Tbl1.Entity;
				if (((previousValue != value) 
							|| (this._Tbl1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl1.Entity = null;
						previousValue.Tbl5s.Remove(this);
					}
					this._Tbl1.Entity = value;
					if ((value != null))
					{
						value.Tbl5s.Add(this);
						this._IdTbl1 = value.Id;
					}
					else
					{
						this._IdTbl1 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tbl1");
				}
			}
		}
		
		[Association(Name="Tbl2_Tbl5", Storage="_Tbl2", ThisKey="IdTbl2", IsForeignKey=true)]
		public Tbl2 Tbl2
		{
			get
			{
				return this._Tbl2.Entity;
			}
			set
			{
				Tbl2 previousValue = this._Tbl2.Entity;
				if (((previousValue != value) 
							|| (this._Tbl2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl2.Entity = null;
						previousValue.Tbl5s.Remove(this);
					}
					this._Tbl2.Entity = value;
					if ((value != null))
					{
						value.Tbl5s.Add(this);
						this._IdTbl2 = value.Id;
					}
					else
					{
						this._IdTbl2 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tbl2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tbl7s(Tbl7 entity)
		{
			this.SendPropertyChanging();
			entity.Tbl5 = this;
		}
		
		private void detach_Tbl7s(Tbl7 entity)
		{
			this.SendPropertyChanging();
			entity.Tbl5 = null;
		}
		
		private void attach_Tbl6s(Tbl6 entity)
		{
			this.SendPropertyChanging();
			entity.Tbl5 = this;
		}
		
		private void detach_Tbl6s(Tbl6 entity)
		{
			this.SendPropertyChanging();
			entity.Tbl5 = null;
		}
	}
}
#pragma warning restore 1591
